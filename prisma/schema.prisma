generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SkillStatus {
  PUBLISHED
  DRAFT
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  role          Role            @default(USER)
  email         String          @unique
  password      String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  contributions Contribution[]
  blogs         Blog[]
  skills        Skill[]
  projects      Project[]
}

model Contribution {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  user_id     String?  @db.ObjectId
  user        User?    @relation(fields: [user_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

enum BlogStatus {
  PUBLISHED
  DRAFT
}

model Blog {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  category   String
  content    String
  status     BlogStatus @default(DRAFT)
  views      Int        @default(0)
  user_id    String?    @db.ObjectId
  user       User?      @relation(fields: [user_id], references: [id])
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Skill {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  category    String
  description String
  level       String
  status      SkillStatus @default(DRAFT)
  user_id     String?    @db.ObjectId
  user        User?      @relation(fields: [user_id], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

enum ProjectStatus {
  PUBLISHED
  DRAFT
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  category    String
  description String
  status      ProjectStatus @default(DRAFT)
  user_id     String?      @db.ObjectId
  user        User?        @relation(fields: [user_id], references: [id])
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}